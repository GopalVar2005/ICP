class Solution {
    public int longestOnes(int[] nums, int k) {
        int i=0, j=0, max=0, zero=0;
        while(j<nums.length)
        {
            if(nums[j]==0)
            {
                zero++;
            }
            if(zero<=k)
            {
                max=Math.max(max, j-i+1);
                j++;
            }
            else
            {
                while(zero>k)
                {
                    if(nums[i]==0)
                    {
                        zero--;
                    }
                    i++;
                }
                j++;
            }
        }   
        return max;
    }
}
TC-O(N)
SC-(1)

Example 1:
Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.

Example 2:
Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
