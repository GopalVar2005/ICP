class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap<Character, Integer> map=new HashMap<>();
        int i=0, j=0, maxlen=0, duplicates=0;
        while(j<s.length())
        {
            map.put(s.charAt(j), map.getOrDefault(s.charAt(j), 0)+1);
            duplicates+=map.get(s.charAt(j))-1;
            if(duplicates==0)
            {
                maxlen=Math.max(maxlen, j-i+1);
                j++;
            }
            else if(duplicates>0)
            {
                while(duplicates>0)
                {
                    int cur=map.get(s.charAt(i));
                    if(cur==1)
                    {
                        map.remove(s.charAt(i));
                    }
                    else
                    {
                        map.put(s.charAt(i), cur-1);
                        duplicates--;
                    }
                    i++;
                }
                j++;
            }
        }
        return maxlen;
    }
}
TC-O(N)
SC-O(Min(n, charset_size))

Example 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
