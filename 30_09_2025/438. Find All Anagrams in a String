class Solution {
    public List<Integer> findAnagrams(String s2, String s1) {
        List<Integer> ans=new ArrayList<>();
        int[] s1freq=new int[26];
        for(int k=0;k<s1.length();k++)
        {
            s1freq[s1.charAt(k)-97]++;
        }
        int[] s2freq=new int[26];
        int i=0, j=0;
        while(j<s2.length())
        {
            s2freq[s2.charAt(j)-97]++;
            if(j-i+1<s1.length())
            {
                j++;
            }
            else
            {
                if(Arrays.equals(s1freq, s2freq))
                {
                    ans.add(i);
                }
                s2freq[s2.charAt(i)-97]--;
                i++;
                j++;
            }
        }
        return ans;
    }
}
TC-O(|s1|+|s2|)
SC-O(|s2|)

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".

Example 2:
Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
