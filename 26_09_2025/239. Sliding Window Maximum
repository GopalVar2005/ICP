class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n=nums.length;
        int[] ans=new int[n-k+1];
        int idx=0;
        Deque<Integer> q=new ArrayDeque<>();
        for(int i=0;i<n;i++)
        {
            while(!q.isEmpty() && q.peekFirst()<=i-k)
            {
                q.pollFirst();
            }
            while(!q.isEmpty() && nums[q.peekLast()]<nums[i])
            {
                q.pollLast();
            }
            q.offerLast(i);
            if(i>=k-1)
            {
                ans[idx++]=nums[q.peekFirst()];
            }
        }
        return ans;
    }
}
TC-O(N)
SC-O(K)

Example 1:
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

Example 2:
Input: nums = [1], k = 1
Output: [1]

