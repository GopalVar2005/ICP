class Solution {
    public int numIslands(char[][] grid) {
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        for(boolean[] arr:visited)
        {
            Arrays.fill(arr, false);
        }
        int count=0;
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]=='1' && !visited[i][j])
                {
                    mark(grid, visited, i, j);
                    count++;
                }
            }
        }
        return count;
    }
    public void mark(char[][] grid, boolean[][] visited, int row, int col)
    {
        if(row<0 || col<0 || row>=grid.length || col>=grid[0].length || grid[row][col]=='0' || visited[row][col])
        {
            return;
        }
        visited[row][col]=true;
        //grid[row][col]='0';
        mark(grid, visited, row-1, col);
        mark(grid, visited, row, col+1);
        mark(grid, visited, row+1, col);
        mark(grid, visited, row, col-1);
        //grid[row][col]='1';
    }
}
TC-O(m*n)
SC-O(m*n)

Example 1:
Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

Example 2:
Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
