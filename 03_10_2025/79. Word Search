class Solution {
    public boolean exist(char[][] board, String word) {
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[0].length;j++)
            {
                if(board[i][j]==word.charAt(0))
                {
                    boolean ans=find(board, word, i, j, 0);
                    if(ans)
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    public boolean find(char[][] board, String word, int row, int col, int idx)
    {
        if(row<0 || col<0 || row>=board.length || col>=board[0].length || idx>=word.length() || board[row][col]=='*' || board[row][col]!=word.charAt(idx))
        {
            return false;
        }
        if(idx==word.length()-1)
        {
            return true;
        }
        board[row][col]='*';
        boolean up=find(board, word, row-1, col, idx+1);
        boolean right=find(board, word, row, col+1, idx+1);
        boolean down=find(board, word, row+1, col, idx+1);
        boolean left=find(board, word, row, col-1, idx+1);
        board[row][col]=word.charAt(idx);
        return up || right || down || left;
    }
}
Time Complexity: O(m * n * 4^L)
Space Complexity: O(L) (recursion stack)

Example 1:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true

Example 2:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true

Example 3:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false
