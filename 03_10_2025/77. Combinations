class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> ans=new ArrayList<>();
        solve(n, k, 1, ans, new ArrayList<>());
        return ans;
    }
    public void solve(int n, int k, int num, List<List<Integer>> ans, List<Integer> ll)
    {
        if(k==0)
        {
            ans.add(new ArrayList<>(ll));
            return;
        }
        if(num>n)
        {
            return;
        }
        ll.add(num);
        solve(n, k-1, num+1, ans, ll);
        ll.remove(ll.size()-1);

        solve(n, k, num+1, ans, ll);
    }
}
Time Complexity: O(C(n, k) * k) (tight bound), worst-case O(2^n) calls
Space Complexity: O(k) auxiliary, plus O(C(n,k) * k) for results

Example 1:
Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Explanation: There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.

Example 2:
Input: n = 1, k = 1
Output: [[1]]
Explanation: There is 1 choose 1 = 1 total combination.
