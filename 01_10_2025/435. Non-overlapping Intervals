class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        Arrays.sort(intervals, (a,b)->{
            if(a[0]!=b[0])
            {
                return a[0]-b[0];
            }
            else
            {
                return a[1]-b[1];
            }
        });
        int count=0, first=intervals[0][1], last=intervals[0][1];
        for(int i=1;i<intervals.length;i++)
        {
            if(intervals[i][0]==first && intervals[i][1]==last)
            {
                count++;
            }
            else if(last>intervals[i][0])
            {
                count++;
                last=Math.min(last, intervals[i][1]);
            }
            else if(last<=intervals[i][0])
            {
                first=intervals[i][0];
                last=intervals[i][1];
            }
        }
        return count;
    }
TC-O(NlogN)
SC-O(1)

Example 1:

Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.

Example 2:
Input: intervals = [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.

Example 3:
Input: intervals = [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
}
